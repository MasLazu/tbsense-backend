// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TbSense.Backend.EfCore.Data;

#nullable disable

namespace TbSense.Backend.Migrator.Migrations
{
    [DbContext(typeof(TbSenseBackendDbContext))]
    [Migration("20251004140342_RemoveAverageYieldProperties")]
    partial class RemoveAverageYieldProperties
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TbSense.Backend.Domain.Entities.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_path");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_used");

                    b.Property<DateTime>("TrainingDataEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("training_data_end");

                    b.Property<DateTime>("TrainingDataStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("training_data_start");

                    b.Property<string>("TrainingStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("training_status");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_models");

                    b.ToTable("models", (string)null);
                });

            modelBuilder.Entity("TbSense.Backend.Domain.Entities.Plantation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<float>("LandAreaHectares")
                        .HasColumnType("real")
                        .HasColumnName("land_area_hectares");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_plantations");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_plantations_name");

                    b.ToTable("plantations", (string)null);
                });

            modelBuilder.Entity("TbSense.Backend.Domain.Entities.PlantationCoordinate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<Guid>("PlantationId")
                        .HasColumnType("uuid")
                        .HasColumnName("plantation_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_plantation_coordinates");

                    b.HasIndex("PlantationId")
                        .HasDatabaseName("ix_plantation_coordinates_plantation_id");

                    b.ToTable("plantation_coordinates", (string)null);
                });

            modelBuilder.Entity("TbSense.Backend.Domain.Entities.PlantationHarvest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("HarvestDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("harvest_date");

                    b.Property<Guid>("PlantationId")
                        .HasColumnType("uuid")
                        .HasColumnName("plantation_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<float>("YieldKg")
                        .HasColumnType("real")
                        .HasColumnName("yield_kg");

                    b.HasKey("Id")
                        .HasName("pk_plantation_harvests");

                    b.HasIndex("PlantationId")
                        .HasDatabaseName("ix_plantation_harvests_plantation_id");

                    b.ToTable("plantation_harvests", (string)null);
                });

            modelBuilder.Entity("TbSense.Backend.Domain.Entities.PlantationYieldPrediction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_id");

                    b.Property<Guid>("PlantationId")
                        .HasColumnType("uuid")
                        .HasColumnName("plantation_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_plantation_yield_predictions");

                    b.HasIndex("ModelId")
                        .HasDatabaseName("ix_plantation_yield_predictions_model_id");

                    b.HasIndex("PlantationId")
                        .HasDatabaseName("ix_plantation_yield_predictions_plantation_id");

                    b.ToTable("plantation_yield_predictions", (string)null);
                });

            modelBuilder.Entity("TbSense.Backend.Domain.Entities.Tree", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("PlantationId")
                        .HasColumnType("uuid")
                        .HasColumnName("plantation_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_trees");

                    b.HasIndex("PlantationId")
                        .HasDatabaseName("ix_trees_plantation_id");

                    b.ToTable("trees", (string)null);
                });

            modelBuilder.Entity("TbSense.Backend.Domain.Entities.TreeMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<float>("AirTemperature")
                        .HasColumnType("real")
                        .HasColumnName("air_temperature");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<float>("SoilMoisture")
                        .HasColumnType("real")
                        .HasColumnName("soil_moisture");

                    b.Property<float>("SoilTemperature")
                        .HasColumnType("real")
                        .HasColumnName("soil_temperature");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<Guid>("TreeId")
                        .HasColumnType("uuid")
                        .HasColumnName("tree_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_tree_metrics");

                    b.HasIndex("TreeId")
                        .HasDatabaseName("ix_tree_metrics_tree_id");

                    b.ToTable("tree_metrics", (string)null);
                });

            modelBuilder.Entity("TbSense.Backend.Domain.Entities.PlantationCoordinate", b =>
                {
                    b.HasOne("TbSense.Backend.Domain.Entities.Plantation", "Plantation")
                        .WithMany("PlantationCoordinates")
                        .HasForeignKey("PlantationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plantation_coordinates_plantations_plantation_id");

                    b.Navigation("Plantation");
                });

            modelBuilder.Entity("TbSense.Backend.Domain.Entities.PlantationHarvest", b =>
                {
                    b.HasOne("TbSense.Backend.Domain.Entities.Plantation", "Plantation")
                        .WithMany("Harvests")
                        .HasForeignKey("PlantationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plantation_harvests_plantations_plantation_id");

                    b.Navigation("Plantation");
                });

            modelBuilder.Entity("TbSense.Backend.Domain.Entities.PlantationYieldPrediction", b =>
                {
                    b.HasOne("TbSense.Backend.Domain.Entities.Model", "Model")
                        .WithMany("YieldPredictions")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plantation_yield_predictions_models_model_id");

                    b.HasOne("TbSense.Backend.Domain.Entities.Plantation", "Plantation")
                        .WithMany("YieldPredictions")
                        .HasForeignKey("PlantationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plantation_yield_predictions_plantations_plantation_id");

                    b.Navigation("Model");

                    b.Navigation("Plantation");
                });

            modelBuilder.Entity("TbSense.Backend.Domain.Entities.Tree", b =>
                {
                    b.HasOne("TbSense.Backend.Domain.Entities.Plantation", "Plantation")
                        .WithMany("Trees")
                        .HasForeignKey("PlantationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trees_plantations_plantation_id");

                    b.Navigation("Plantation");
                });

            modelBuilder.Entity("TbSense.Backend.Domain.Entities.TreeMetric", b =>
                {
                    b.HasOne("TbSense.Backend.Domain.Entities.Tree", "Tree")
                        .WithMany("Metrics")
                        .HasForeignKey("TreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tree_metrics_trees_tree_id");

                    b.Navigation("Tree");
                });

            modelBuilder.Entity("TbSense.Backend.Domain.Entities.Model", b =>
                {
                    b.Navigation("YieldPredictions");
                });

            modelBuilder.Entity("TbSense.Backend.Domain.Entities.Plantation", b =>
                {
                    b.Navigation("Harvests");

                    b.Navigation("PlantationCoordinates");

                    b.Navigation("Trees");

                    b.Navigation("YieldPredictions");
                });

            modelBuilder.Entity("TbSense.Backend.Domain.Entities.Tree", b =>
                {
                    b.Navigation("Metrics");
                });
#pragma warning restore 612, 618
        }
    }
}
